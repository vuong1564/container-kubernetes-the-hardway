# -*- mode: ruby -*-
# vi: set ft=ruby :

CONTROLLER_IP_START=10
WORKER_IP_START=20
NETWORK="192.168.56."
NUM_CONTROLLER_NODES=1
NUM_WORKER_NODES=0

Vagrant.configure("2") do |config|
  config.vm.provision "shell", inline: <<-SHELL

    for i in $(seq 1 #{NUM_CONTROLLER_NODES})
    do
      sed -i "/^.*controller-${i}$/d" /etc/hosts
      echo "#{NETWORK}$((#{CONTROLLER_IP_START}+i))  controller-${i}" >> /etc/hosts
    done

    for i in $(seq 1 #{NUM_WORKER_NODES})
    do
      sed -i "/^.*worker-${i}$/d" /etc/hosts
      echo "#{NETWORK}$((#{WORKER_IP_START}+i))  worker-${i}" >>  /etc/hosts
    done
    sudo sed -i 's/^#* *\(PermitRootLogin\)\(.*\)$/\1 yes/' /etc/ssh/sshd_config
    sudo sed -i 's/^#* *\(PasswordAuthentication\)\(.*\)$/\1 yes/' /etc/ssh/sshd_config
    sudo systemctl restart sshd.service
    echo -e "admin@123\nadmin@123" | (sudo passwd root)
    echo -e "admin@123\nadmin@123" | (sudo passwd vagrant)
    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDFHZehgsD5PddQAR2KOznQh5vJADrALedzyoSn/kF6dehrDtB37VcO885Gk4qCA0PpenOPP/g1Ps9Rj5rrdKv5b+aqjjdY4KFQynGH5CXRMF5DHoVJSCoWMd+g9VC0AA/UPZXEF18GxIkecq1trmrz0Wj+NZXH51jvfcFt7Qc3CdvbMClQ5yh7ZMWvlbhNyXl1sc3kXCZHvbndwHA/b7FebGT/VDaDzoFv5Fc70qHJH4Kgyw/8FbDygyz3fFmYTiRjWyec4NjsuAGOtCZx2tt07nbzt0A36631RjDRgl3cPxB2XEnhhBqj/qjebQJQrLooAW+jdFMrazIqFY8qjOLTN9VWJp1p8LchGgz3aSpMV/iMfIA46cY+ZyYBje7U5hjU8X/VFiFWIpQfTLtN3Gwe0n+Lh9I7whmS+JSFoaKAxM1PdwyUHHixPMjzl5NZBrgd72POkuNyFtV/hRmrKA33I0bddnjSbdA86fJFKU5esVS50lMDxjd3J0P9U7gUoPE= vuongnd@vuongnd-Business-PC" >> /home/vagrant/.ssh/authorized_keys
    
  SHELL
  #config.vm.box = "ubuntu/focal64"
  #config.vm.box = "ubuntu/bionic64"
  config.vm.box = "centos/7"
  #config.vm.box = "generic/rhel7"

  config.vm.box_url = "file:///home/vuongnd/devops/k1.5-container-kubernetes-the-hardway/kubernetes/demo/setup/CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box"
  #config.vm.box_url = "file:///home/vuongnd/devops/k1.5-container-kubernetes-the-hardway/kubernetes/setup/ubuntu20.box"
  config.vm.box_check_update = false
  #config.vm.provision :file, source: '/home/vuongnd/Downloads/rhel-server-7.9-x86_64-dvd.iso', destination: "/tmp/examples" #copy file from locahost to VMS

  #enable password ssh authentication for vm
  #config.ssh.username = 'admin'
  #config.ssh.private_key_path = '~/.ssh/id_rsa'
  #config.ssh.password = 'admin@123'
  #config.ssh.insert_key = false
  #config.ssh.keys_only = false


  (1..NUM_CONTROLLER_NODES).each do |idx|
    config.vm.define "controller-#{idx}" do |controller|
      controller.vm.hostname = "controller-#{idx}"
      controller.vm.network "private_network", 
        ip: NETWORK + "#{CONTROLLER_IP_START + idx}"

      controller.vm.provision "shell", inline: <<-SHELL
#        curl -LO https://go.dev/dl/go1.18.2.linux-amd64.tar.gz
#        rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.2.linux-amd64.tar.gz
#        echo "export PATH=\$PATH:/usr/local/go/bin" >> /etc/profile
      SHELL
      
      controller.vm.provider "virtualbox" do |vb|
        vb.gui = false
        vb.memory = "1024"
        vb.cpus = 1
      end    
    end
  end
  

  (1..NUM_WORKER_NODES).each do |i|
    config.vm.define "worker-#{i}" do |node|
      node.vm.hostname = "worker-#{i}"
      node.vm.network "private_network", ip: NETWORK + "#{WORKER_IP_START + i}"

      node.vm.provider "virtualbox" do |vb|
          vb.memory = 1024
          vb.cpus = 1
          # vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      end
      # node.vm.provision "shell", path: "scripts/common.sh"
      # node.vm.provision "shell", path: "scripts/node.sh"
    end
  end
  

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
#   config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
